public class Solution {
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) return false; // No cycle if list is empty or has only one node

        ListNode slow = head;  // moves 1 step at a time
        ListNode fast = head;  // moves 2 steps at a time

        while (fast != null && fast.next != null) {
            slow = slow.next;         // move slow pointer by 1
            fast = fast.next.next;    // move fast pointer by 2

            if (slow == fast) {       // pointers meet → cycle exists
                return true;
            }
        }

        return false; // If fast reaches null → no cycle
    }
}
