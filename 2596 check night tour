class Solution {
    public boolean checkValidGrid(int[][] grid) {
        int n = grid.length;
        
        // The knight must start at position (0, 0)
        if (grid[0][0] != 0) return false;
        
        // Store positions of each move number
        int[][] pos = new int[n * n][2];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                pos[grid[i][j]][0] = i;
                pos[grid[i][j]][1] = j;
            }
        }
        
        // Check all consecutive moves
        for (int step = 1; step < n * n; step++) {
            int prevX = pos[step - 1][0], prevY = pos[step - 1][1];
            int currX = pos[step][0], currY = pos[step][1];
            if (!isKnightMove(prevX, prevY, currX, currY)) {
                return false;
            }
        }
        return true;
    }
    
    private boolean isKnightMove(int x1, int y1, int x2, int y2) {
        int dx = Math.abs(x1 - x2);
        int dy = Math.abs(y1 - y2);
        return (dx == 2 && dy == 1) || (dx == 1 && dy == 2);
    }
}
